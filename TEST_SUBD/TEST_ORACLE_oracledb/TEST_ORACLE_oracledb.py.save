#=======================================================================================
# TEST_ORACLE_oracledb.py
#=======================================================================================

#------------------------------------------
# БИБЛИОТЕКИ python
#------------------------------------------
import os
import sys

#------------------------------------------
# БИБЛИОТЕКИ сторонние
#------------------------------------------
import argparse
import datetime
import getpass
import oracledb

#------------------------------------------
#БИБЛИОТЕКА LU
#------------------------------------------
import LUConst
import LUStrings
import LUSupport
#------------------------------------------

#------------------------------------------
# Разбор аргументов
#------------------------------------------
parser = argparse.ArgumentParser(description='Параметры')
parser.add_argument('-P1', type=str, nargs='?', default='', dest='P1', help='P1')
args = parser.parse_args()
print('-P1 =',args.P1)
#------------------------------------------
#------------------------------------------
P1: str = ''
if args.P1 != '':
    P1 = args.P1
#endif
#------------------------------------------

#-------------------------------------------------------------------------------
# CreateConnectio ():
#-------------------------------------------------------------------------------
def CreateConnection ():
    global connection
    global dbCursor
#beginfunction
    print ("CreateConnection ...")
    connection = oracledb.connect(user='ot',
                              password='OT',
                              dsn='localhost/orcl')
    print ("Successfully connected to Oracle Database")
    dbCursor = connection.cursor ()
#endfunction

#-------------------------------------------------------------------------------
# CREATE_Table ():
#-------------------------------------------------------------------------------
def CREATE_Table ():
#beginfunction
    print ("create table todoitem ...")
    qCreateTable = """
        create table todoitem (
            id number generated always as identity,
            description varchar2(4000),
            creation_ts timestamp with time zone default current_timestamp,
            done number(1,0),
            primary key (id))"""
    #print (qCreateTable)
    dbCursor.execute (qCreateTable)
#endfunction

#-------------------------------------------------------------------------------
# DROP_Table ():
#-------------------------------------------------------------------------------
def DROP_Table ():
#beginfunction
    print ("drop table todoitem ...")
    qDropTable = """
        begin
            execute immediate 'drop table todoitem';
            exception when others then if sqlcode <> -942 then raise; end if;
        end;"""
    #print (qDropTable)
    dbCursor.execute (qDropTable)
#endfunction

#-------------------------------------------------------------------------------
# INSERT_Table ():
#-------------------------------------------------------------------------------
def INSERT_Table ():
#beginfunction
    print ("INSERT_Table ...")
    rows = [("Task 1", 0),
        ("Task 2", 0),
        ("Task 3", 1),
        ("Task 4", 0),
        ("Task 5", 1)]
    dbCursor.executemany ("insert into todoitem (description, done) values(:1, :2)", rows)
    print (dbCursor.rowcount, "Rows Inserted")
    connection.commit ()
#endfunction

#-------------------------------------------------------------------------------
# SELECT_Table ():
#-------------------------------------------------------------------------------
def SELECT_Table ():
#beginfunction
    for row in dbCursor.execute ('select description, done from todoitem'):
        if row [1]:
            print (row [0], "is done")
        else:
            print (row [0], "is NOT done")
#endfunction

#------------------------------------------
# main():
#------------------------------------------
def main():
#beginfunction
    CreateConnection ()
    DROP_Table ()
    CREATE_Table ()
    INSERT_Table ()
    SELECT_Table ()
#endfunction

#------------------------------------------
#
#------------------------------------------
#beginmodule
if __name__ == "__main__":
    main()
#endif

#endmodule















